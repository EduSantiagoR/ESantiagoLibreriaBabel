@page "/libros"
@inject NavigationManager NavigationManager

<h3 class="text-center">Libros</h3>
<hr />
<div>
    <button class="btn btn-success" @onclick="() => ChangeView(0)">Agregar</button>
</div>
<hr />
<div>
    @if(result.Objtecs.Count > 0)
    {
        <table class="table table-dark table-hover text-center">
            <thead>
                <tr>
                    <th>Editar</th>
                    <th>Titulo</th>
                    <th>Volumen</th>
                    <th>Sala</th>
                    <th>Librero</th>
                    <th>Estante</th>
                    <th>Posicion</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach(ML.Libro libro in result.Objtecs)
                {
                    <tr>
                        <td>
                            <a @onclick="() => ChangeView(libro.IdLibro)" class="btn btn-warning">
                                <i class="fa-solid fa-gear"></i>
                            </a>
                        </td>
                        <td>@libro.Titulo</td>
                        <td>@libro.Volumen</td>
                        <td>@libro.Ubicacion.Sala</td>
                        <td>@libro.Ubicacion.Librero</td>
                        <td>@libro.Ubicacion.Estante</td>
                        <td>@libro.Ubicacion.Posicion</td>
                        <td>
                            <a @onclick="()=>MostrarModal(libro.IdLibro)" class="btn btn-danger">
                                <i class="fa-solid fa-trash-can-arrow-up"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div role="alert" class="alert alert-warning">
            No hay libros registrados.
        </div>
    }
</div>

<Modal MostrarModal="@mostrarModal"
    MostrarModalChanged="ActualizarMostrarModal"
    Mensaje="@mensaje"
    OnContinuar="accion"
    MostrarBotonCerrar="@mostrarBotonCerrar">
</Modal>

@code {
    ML.Result result = new ML.Result();

    bool mostrarModal = false;
    bool mostrarBotonCerrar = false;
    string mensaje;
    Action accion;

    protected override void OnInitialized()
    {
        mostrarModal = false;
        ML.Result resultLibros = new ML.Result();
        resultLibros.Objtecs = new List<object>();
        using(var client = new HttpClient())
        {
            client.BaseAddress = new Uri("http://localhost:5069/api/");
            var taskResponse = client.GetAsync("Libro");
            taskResponse.Wait();

            var resultService = taskResponse.Result;
            if (resultService.IsSuccessStatusCode)
            {
                var readTask = resultService.Content.ReadAsAsync<ML.Result>();
                readTask.Wait();

                foreach(var itemResult in readTask.Result.Objtecs)
                {
                    ML.Libro libro = Newtonsoft.Json.JsonConvert.DeserializeObject<ML.Libro>(itemResult.ToString());
                    resultLibros.Objtecs.Add(libro);
                }
                resultLibros.Correct = readTask.Result.Correct;
                resultLibros.Message = readTask.Result.Message;
            }
        }
        if (resultLibros.Correct)
        {
            result = resultLibros;
        }
    }

    private void Delete(int idLibro)
    {
        ML.Result result = new ML.Result();
        using(var client = new HttpClient())
        {
            client.BaseAddress = new Uri("http://localhost:5069/api/");
            var taskResponse = client.DeleteAsync($"Libro/{idLibro}");
            taskResponse.Wait();

            var resultService = taskResponse.Result;
            if (resultService.IsSuccessStatusCode)
            {
                var readTask = resultService.Content.ReadAsAsync<ML.Result>();
                readTask.Wait();

                result = readTask.Result;
            }
        }
        mensaje = result.Message;
        accion = () => OnInitialized();
        mostrarBotonCerrar = false;
        ActualizarMostrarModal(true);
    }

    void MostrarModal(int id)
    {
        mostrarBotonCerrar = true;
        mensaje = "¿Seguro que quieres eliminar el registro?";
        accion = () => Delete(id);
        mostrarModal = true;
    }

    void ActualizarMostrarModal(bool valor)
    {
        mostrarModal = valor;
    }

    private void ChangeView(int idLibro)
    {
        NavigationManager.NavigateTo($"/libroform/{idLibro}");
    }
}
